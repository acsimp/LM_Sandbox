

<% include ../partials/header %>
<script src="/js/browser.js"></script>
                    <!--<div class="container">-->

     <div class="row" style="display:flex; flex-wrap: wrap; margin-bottom:5px;">
<div class="col-md-12">   
        <input style="width:200px;" class="" type="search" name="placeName" id="placeName" placeholder="What are you looking for?" aria-label="Search">
    <button style="display:inline" class="btn btn-outline-success my-2 my-sm-0" id="searchBtn" type="submit">Search</button>

        <h2>DB Map Test <span style="color: red; font-size: 0.5em" id="demo"></span></h2>
        
        <div id="map">
        

    </div>

<div id="results">
    <div class="item">
    </div>
</div>

</div>
</div>
</div>


<!--</body>-->

    <script src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.js"></script>
    <script>
        if (!support) {
            document.getElementById("demo").innerHTML = "*** Browser May Not Be Supported ***";
        }
    </script>


    <script>
        // Initialise map and fetch token 
        mapkit.init({
            authorizationCallback: function(done) {
                // fetch("/token")
                //     .then(res => res.text())
                //     .then(token => done(token)) /* If successful, return your token to MapKit JS */ 
                //     .catch(error => { /* Handle error */ console.log("nae token")});
                done("eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjI0OU5KQk4ySkoifQ.eyJpc3MiOiJGVVhRWjYyWjlNIiwiaWF0IjoxNTMyMjA4MTEwLjAzMSwiZXhwIjoxNTM0MDA4MTEwLjAzMX0.Ni4ZbLS5ERJd24_Mt19VBsbHsNNEJ11Ps7Ytv-AtwfEGf-14CsedqJAKekAclimyiOOC83ErnsCXtC__j_IBKw"); //alternative to short term token fetched above
            }
        });
        //let map = new mapkit.Map("map", { center: new mapkit.Coordinate(55.8642, -4.2518)  });

        // Set default region of map    
        var region = new mapkit.CoordinateRegion(
            new mapkit.Coordinate(55.8642, -4.2518), //Glasgow
            new mapkit.CoordinateSpan(.05, .05)
        );

        // Generate Map    
        var map = new mapkit.Map("map", {
            center: new mapkit.Coordinate(55.8642, -4.2518),
            region: region,
            showsUserLocation: true,
            showsUserLocationControl: true,
            tracksUserLocation: true,
            showsMapTypeControl: true,
            showsCompass: mapkit.FeatureVisibility.Visible,
            isRotationEnabled: true,
            isScrollEnabled: true,
            isZoomEnabled: true,
        });

        // // Geocode Mad Hatters Paisley    
        //     let geocoder = new mapkit.Geocoder();
        // geocoder.lookup("Mad Hatters Paisley", (error, data) => {
        //     if (error) {
        //         return;
        // }
        // map.addAnnotation(new mapkit.MarkerAnnotation(data.results[0].coordinate)); });


        // Search near user's location

        // let search = new mapkit.Search({ getsUserLocation: true });
        // search.search("coffee shop", (error, data) => {
        //     if (error) {
        //         // handle search error return;
        //     }
        //     // let annotations = data.places.map(place => {
        //     //     let annotation = new mapkit.MarkerAnnotation(place.coordinate);
        //     //     annotation.title = place.name;
        //     //     annotation.subtitle = place.formattedAddress;
        //     //     annotation.color = "#9B6134";
        //     //     return annotation;
        //     // });
        //     map.showItems(annotations);
        //     //console.log(data);
        // });


// //     //controls
    // map.showsUserLocationControl = true; 
    // map.showsScale = mapkit.FeatureVisibility.Visible; 
    // map.showsZoomControl = true;

    // map.tintColor = "#ff4040";
    // map.isZoomEnabled = true; 
    // map.isRotateEnabled = true;
    // Map.isRotationEnabled = true;
    // map.isRotationAvailable = true;
    // map.isScrollEnabled = true;
    // map.showsCompass = true;
    </script>



<script>



document.getElementById("placeName").addEventListener("keypress" , function(event) {
    if(event.keyCode != 13) {
        return;
    }
    
    


        clearPreviousAnnotations();

 
    let address = document.getElementById("placeName").value;
    // 1
    let search = new mapkit.Search({ getsUserLocation: true });
 
    // 2
    search.search(address, function(error, results) {
        if (error) {
            console.log(error);
            return;
        }
 console.log(results);
        // 3


        //  var displayPlaces = JSON.stringify(results);
        // console.log(displayPlaces);
        // var data = JSON.parse(displayPlaces);
for (i = 0; i < results.places.length; i++) {
document.getElementById("results").innerHTML += 
'<div class="card text-center" style="width: 32%; float:left">' + 
'<h5>' + results.places[i].name + '</h5>' + 
'<p>' + results.places[i].formattedAddress + '</p>' + 
'<p>' + results.places[i].coordinate.latitude + '</p>' + 
'<p>' + results.places[i].coordinate.longitude + '</p>' + 
'<p>' + results.places[i].telephone + '</p>' + 
'<a class="btn btn-sm btn-outline-secondary" href="/a-places/a-new?name=' + results.places[i].name + '&myparam2={id2}">Add to database</a>' +
'</div>';
}
                // console.log(data);


    //   var displayPlaces = results.places;
    //   console.log(displayPlaces);
       
       
    //   results.forEach(function(results){
    //       document.getElementById("results").innerHTML += data.place.name;
    //       console.log(data.name);
// $.each(results.place, function () {
// //   $.each(this, function (name, value) {
// // $('results').html($('<div>', {class: 'card'}));   });
// document.getElementById("results").innerHTML = results.places[0].name + results.places[0].formattedAddress + results.places[0].coordinate;

// });
// });
       
        
        var annotations = results.places.map(function(place) {
            var annotation = new mapkit.MarkerAnnotation(place.coordinate);
            annotation.title = place.name;
            //annotation.subtitle = place.formattedAddress;
            //annotation.color = "#51d0f1";
            annotation.clusteringIdentifier = "DetailedCollectionCluster";
annotation.collisionMode = mapkit.Annotation.CollisionMode.Circle;
 
//annotation.displayPriority = mapkit.Annotation.DisplayPriority.High;
            return annotation;
        });

// Clustering setup

        // 4
        map.showItems(annotations);
    });
});

function clearPreviousAnnotations()
{
    let annotations = map.annotations;
    map.removeAnnotations(annotations);
}

</script>

