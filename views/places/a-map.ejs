<% include ../partials/header-top %>

<!--<script src="/js/browser.js"></script>-->
<!--<div class="container">-->
    <link rel="stylesheet" type="text/css" href="/stylesheets/search.css">
      <link rel="stylesheet" type="text/css" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">


<% include ../partials/header-bottom %>

    <div class="banner">
        <div class="container">
            <!--<div class="container">-->
                <!--<h5 class="jumbotron-heading">Search little Maven</h5>-->
                <h5 class="text-center mt-3">Find & Add a New Place</h5>
                <p class="subtitle2 text-center">Step 1 of 4</p>
                    <!--<form id="searchForm" class="" action="/places" autocomplete="off" method="GET">-->
                        <div class="search" id="searchDiv">

                                    
                                    
                                    <input class="" id="latitide" type="hidden" name="lat" placeholder="latitide" value="" >
                                    <input class="" id="longitude" type="hidden" name="lng" placeholder="longitude" value="">
                                    
                                 <div class="right-side searchItem" id="findDiv">
                                    <input class="field location" type="text" id="searchTerm" name="search" autocomplete="off" placeholder="name, category, cuisine..." value="">
                                    <div class="field-wrapper">
                                      <span class="field-title near">Find</span>
                                    </div>
                                  </div>   
                                <div class="right-side near_field searchItem" id="locationDiv">
                                    <input class="field location" type="text" name="geocoder" id="geocoder" autocomplete="off" placeholder="address, neighbouthood, city, postcode" aria-label="geocoder" value="">
                                    <div class="field-wrapper">
                                      <span class="field-title near">Near</span>
                                    </div>
                                    <ul class="right-side__sublist" id="locationDropdown">
                                      <li class="right-side__subitem"><a class="right-side__sublink current" id="nearMeBtn" onclick="getLocation()">Near Me</a></li>
                                    </ul>
                                  </div>
                                    
                                <div class="searchItem" id="searchBtnDiv">
                                    <input class="search-button btn" type="button" id="searchBtn" value="Search">
                                </div>
                                <!--<button class="btn btn-outline-danger my-2 my-sm-0" id="regionSearchBtn" type="submit">Search here instead</button>-->

                        </div>
                    </form>
                    
                    
                    
                    
                    <div id="coords"></div>
                
                <!--<div class="form-inline">-->
                <!--    <input class="form-control mr-sm-2" type="search" name="geocoder" id="geocoder" placeholder="What are you looking for?" aria-label="geocoder">-->
                <!--    <button class="btn btn-outline-success my-2 my-sm-0" id="geocoderBtn" type="submit">Geocode</button>-->
                <!--</div>-->
                
            <!--</div><!--container-->
        </div><!--container-->
    </div>



<!--<div class="jumbotron text-center">-->
<!--    <div class="container">-->
<!--        <div class="row" style="display:flex; flex-wrap: wrap; margin-bottom:5px;">-->
<!--            <div class="col-md-12">-->
                
<!--                <h5 class="">Find & Add a New Place</h5>-->
<!--                <p>-->
                    <!--<form id="searchForm" class="form-inline mx-auto">-->
<!--                        <div class=" mx-auto">-->
<!--                            <label class="label" for="search">Find:</label>-->
<!--                            <input class="mr-sm-2" type="text" name="search" id="searchTerm" placeholder="name, category, cuisine..." value="">-->
                                <!--<input class="form-control" id="location" type="text" name="loc" placeholder="location" onclick="getLocation()" value="">-->
<!--                                <input class="form-control" id="latitide" type="hidden" name="lat" placeholder="latitide" value="" >-->
<!--                                <input class="form-control" id="longitude" type="hidden" name="lng" placeholder="longitude" value="">-->
<!--                            <label class="label ml-1" for="geocoder">Near:</label>-->
<!--                            <input class="mr-sm-2" type="text" name="geocoder" id="geocoder" placeholder="address, neighbouthood, city, postcode" aria-label="geocoder" value="">-->
<!--                            <a class="btn btn-sm btn-outline-info" id="nearMeBtn" onclick="getLocation()">Near Me</a>-->
                                <!--<label class="label ml-1" for="distKm">Radius:</label>-->
                                <!--<input class="form-control" style="width: 70px;" id="distKm" type="number" name="distKm" placeholder="distance in km" value="">-->
                            <!--<input class="btn btn-secondary my-2" type="button" id="searchBtn" value="Search">-->
<!--                            <button class="btn btn-outline-success my-2 my-sm-0" id="searchBtn" type="submit">Search</button>-->
<!--                            <button class="btn btn-outline-danger my-2 my-sm-0" id="regionSearchBtn" type="submit">Search here instead</button>-->

                        
<!--                        </div>-->
                    <!--</form>-->
                    
<!--                    <div id="coords"></div>-->
<!--                </p>-->
                
                <!--<div class="form-inline">-->
                <!--    <input class="form-control mr-sm-2" type="search" name="placeName" id="placeName" placeholder="What are you looking for?" aria-label="Search">-->
                <!--    <button class="btn btn-outline-success my-2 my-sm-0" id="searchBtn" type="submit">Search</button>-->
                <!--</div>-->
                <!--<div class="form-inline">-->
                <!--    <input class="form-control mr-sm-2" type="search" name="geocoder" id="geocoder" placeholder="What are you looking for?" aria-label="geocoder">-->
                <!--    <button class="btn btn-outline-success my-2 my-sm-0" id="geocoderBtn" type="submit">Geocode</button>-->
                <!--</div>-->

<!--            </div>-->
            <!--container-->
<!--            </div>-->
<!--            </div>-->
<!--</div>-->
<div class="container">
<div class="row">


    <!--<div class="col-md-12">-->
    <!--<div class="col-lg-6 col-md-6 col-sm-6" id="cards">-->
    <div id="results-col" class="col-lg-6 col-md-6 col-sm-12 order-2 order-md-1">
    <div id="results" class="row">

        </div>
    </div>
    
    <div class="col-lg-6 col-md-6 col-sm-12 order-1 order-md-2" id="">
    <div id="map">

     <button class="btn btn-secondary my-2 my-sm-0" id="regionSearchBtn" type="submit" style="position: absolute; z-index: 2; left: 50%; transform: translate(-50%,0); top: 10px;">Search This Map Area</button>



    </div>
    </div>

</div>
</div>
<!--</div>-->



<!--</body>-->

<script src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.js"></script>



<script>
    // Initialise map and fetch token 
    mapkit.init({
        authorizationCallback: function(done) {
            fetch("/token")
                .then(res => res.text())
                .then(token => done(token)) /* If successful, return your token to MapKit JS */
                .catch(error => { /* Handle error */
                    console.log("nae token")
                });
            // done("eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjI0OU5KQk4ySkoifQ.eyJpc3MiOiJGVVhRWjYyWjlNIiwiaWF0IjoxNTM0NjA4MDI4LjEzNSwiZXhwIjoxNTM0NjA5ODI4LjEzNX0.RlxNj23pp1Agx1qwfuHMcRCAgx5nFDXKpxmSLgEKuxOn_to3p-4LOH0uqNMACBY52WEOhxgW6byx8fDCY9E5kg"); //alternative to short term token fetched above
        }

    });
    //let map = new mapkit.Map("map", { center: new mapkit.Coordinate(55.8642, -4.2518)  });

    var glasgowLat = 55.8642;
    var glasgowLng = -4.2518;    
    
    // Set default region of map    
    region = new mapkit.CoordinateRegion(
        new mapkit.Coordinate(glasgowLat, glasgowLng), //Glasgow
        new mapkit.CoordinateSpan(.04, .04)
    );
        var map = new mapkit.Map("map", {
        // center: new mapkit.Coordinate(55.8642, -4.2518),
        region: region,
        showsUserLocation: true,
        showsUserLocationControl: true,
        // tracksUserLocation: true,
        showsMapTypeControl: true,
        showsCompass: mapkit.FeatureVisibility.Visible,
        title: mapkit.FeatureVisibility.Visible,
        isRotationEnabled: true,
        isScrollEnabled: true,
        isZoomEnabled: true,
        showsScale: true,
    });
    map.showsScale = mapkit.FeatureVisibility.Visible; 
    


    



    // Generate Map    


    // // Geocode Mad Hatters Paisley    
    //     let geocoder = new mapkit.Geocoder();
    // geocoder.lookup("Mad Hatters Paisley", (error, data) => {
    //     if (error) {
    //         return;
    // }
    // map.addAnnotation(new mapkit.MarkerAnnotation(data.results[0].coordinate)); });


    // Search near user's location

    // let search = new mapkit.Search({ getsUserLocation: true });
    // search.search("coffee shop", (error, data) => {
    //     if (error) {
    //         // handle search error return;
    //     }
    //     // let annotations = data.places.map(place => {
    //     //     let annotation = new mapkit.MarkerAnnotation(place.coordinate);
    //     //     annotation.title = place.name;
    //     //     annotation.subtitle = place.formattedAddress;
    //     //     annotation.color = "#9B6134";
    //     //     return annotation;
    //     // });
    //     map.showItems(annotations);
    //     //console.log(data);
    // });


    // //     //controls
    // map.showsUserLocationControl = true; 
    // map.showsScale = mapkit.FeatureVisibility.Visible; 
    // map.showsZoomControl = true;

    // map.tintColor = "#ff4040";
    // map.isZoomEnabled = true; 
    // map.isRotateEnabled = true;
    // Map.isRotationEnabled = true;
    // map.isRotationAvailable = true;
    // map.isScrollEnabled = true;
    // map.showsCompass = true;
</script>



<script> // search and display places on the map and in a list

    // // listen for search input submission via enter key
    // document.getElementById("searchTerm").addEventListener("keypress", function(e) {
    //     if (e.keyCode === 13) { //checks whether the pressed key is "Enter"
    //         submitFn(e);
    //     }
    // });
    // // listen for search input submission via search button click
    // document.getElementById("searchBtn").addEventListener("click", submitFn());


    // //search Mapkit JS Places API with search query
    // function submitFn() {

    //     // call function to clear any exisiting search results
    //     clearPreviousAnnotations();
        
        
    //     let location = document.getElementById("geocoder").value;
    //     let geocoder = new mapkit.Geocoder({
    //         getsUserLocation: true
    //     });
    //     if (!location == "") {
    //     geocoder.lookup(location, function(error, data) {
    //         if (error) {
    //             console.log(error);
    //             return;
    //         }
    //         // console.log(data);

    //             // document.getElementById("geo-coords").innerHTML +=
    //             //     '<h5 class="card-title mb-3">' + data.results[0].coordinate + '</h5>';

    //             // map.addAnnotation(new mapkit.MarkerAnnotation(data.results[0].coordinate));
    //             // let coordinate = new mapkit.Coordinate(data.results[0].coordinate.latitude, data.results[0].coordinate.longitude);
    //             // map.setCenterAnimated(coordinate, true);
    //             document.getElementById("latitide").value = data.results[0].coordinate.latitude;
    //             document.getElementById("longitude").value = data.results[0].coordinate.longitude;
    //             // document.getElementById("distKm").value = 3;
    //             // document.getElementById("searchForm").submit();
                
    //         });
    //     } else {
    //     // document.getElementById("searchForm").submit();
    // }
    
    
    var placeObj = [];    
    
        // listen for geocoder input submission via enter key
    document.getElementById("searchTerm").addEventListener("keypress", function(e) {
        if (e.keyCode === 13) { //checks whether the pressed key is "Enter"
            searchFn(e);
        }
    });
    // listen for search input submission via search button click
    document.getElementById("searchBtn").addEventListener("click", searchFn);

    // listen for search input submission via reion search button click
    document.getElementById("regionSearchBtn").addEventListener("click", regionSearchFn);

    function regionSearchFn() {
                
        clearPreviousAnnotations();
        
        document.getElementById("geocoder").value = "";
        document.getElementById("latitide").value = "";
        document.getElementById("longitude").value = "";

            search = new mapkit.Search({
            region: map.region
        });
           
        performSearch(search);

    };


    //search Mapkit JS Places API with search query
    function searchFn() {

        // // call function to clear any exisiting search results
        // clearPreviousAnnotations();

        let location = document.getElementById("geocoder").value;
        let lat;
        let lng;
        let search;
        console.log("location: " + location);
        let geocoder = new mapkit.Geocoder({
            getsUserLocation: true
        });
        if (!location == "") {
        geocoder.lookup(location, function(error, data) {
            if (error) {
                console.log(error);
                return;
            }
            // console.log(data);
                // document.getElementById("results").innerHTML +=
                //     '<h5 class="card-title mb-3">' + data.results[0].coordinate + '</h5>';
                lat = data.results[0].coordinate.latitude;
                lng = data.results[0].coordinate.longitude;
                document.getElementById("latitide").value = lat;
                document.getElementById("longitude").value = lng;
                
                // map.addAnnotation(new mapkit.MarkerAnnotation(data.results[0].coordinate));
            // });
            // map.showItems(annotations);
            var center = new mapkit.Coordinate(lat, lng),
                span = new mapkit.CoordinateSpan(0.0015, 0.0015),
                region = new mapkit.CoordinateRegion(center, span);
            
            search = new mapkit.Search({
            getsUserLocation: true,
            coordinate: new mapkit.Coordinate(lat, lng),
            region: region
        });
            let coordinate = new mapkit.Coordinate(lat, lng);
                // map.setCenterAnimated(coordinate, true);
                map.setRegionAnimated(region, true);
                
                var MarkerAnnotation = mapkit.MarkerAnnotation;
                var mapItems = [];
                    var orginAnnotation = new mapkit.MarkerAnnotation(coordinate, { color: "green", glyphText: "HERE" });
                    mapItems.push(orginAnnotation);
                map.showItems(mapItems);

                
                
                // performSearch(search);
                setTimeout(function() { performSearch(search); }, 2000);

        });
        // search = new mapkit.Search({
        //     getsUserLocation: true,
        //     coordinate: new mapkit.Coordinate(53.3498, -6.2603)
        // });
        // };
        
        } else {
            search = new mapkit.Search({
            getsUserLocation: true,
        });
        performSearch(search);
        }
    };
        
      function performSearch(search) {
        clearPreviousAnnotations();
        let searchTerm = document.getElementById("searchTerm").value;
        // let search = new mapkit.Search({
        //     getsUserLocation: true,
        //     coordinate: new mapkit.Coordinate(lat, lng)
        // });

// console.log("coords: " + lat + ", " + lng);

        search.search(searchTerm, function(error, results) {
            if (error) {
                console.log(error);
                return;
            }
            // console.log(results);


            // //display search results list
            // for (i = 0; i < results.places.length; i++) {
            //     document.getElementById("results").innerHTML +=
            //         '<div class="card text-center" style="width: 32%; float:left">' +
            //         '<h5>' + results.places[i].name + '</h5>' +
            //         '<p>' + results.places[i].formattedAddress + '</p>' +
            //         '<p>' + results.places[i].coordinate.latitude + '</p>' +
            //         '<p>' + results.places[i].coordinate.longitude + '</p>' +
            //         '<p>' + results.places[i].telephone + '</p>' +
            //         '<a class="btn btn-sm btn-outline-secondary" href="/a-places/a-new?name=' + results.places[i].name + '&myparam2={id2}">Add to database</a>' +
            //         '</div>';
            // }
            // var limit = 10;
            // if (results.places.length <10){
            //     limit = results.places.length;
            // }
            var limit = results.places.length;
            //var placeObj = [];

            for (i = 0; i < limit; i++) {
                placeObj[i] = results.places[i];
                // console.log(myObjStr[i]);
                document.getElementById("results").innerHTML +=

                    '<div class="col-lg-6 col-md-6 col-sm-12" id="cards">' +
                    '<div class="content card mb-4 box-shadow">' +
                    '<span class="placeNumber" style="background-color:#757575; right: 0;">' + (i+1).toString() + '</span>' +
                    // '<a href="/a-places/a-new?name=' + results.places[i].name + '&myparam2={id2}"><img class="card-img-top" src="https://www.ppihotline.co.uk/wp-content/uploads/2017/02/placeholder-image.jpg"></a>' +
                    // '<div class="content card-body" style="border-top: 5px solid #00C4B3;">' +
                    '<div class="content card-body">' +
                    '<h6 class="subtitle1">' + results.places[i].name + '</h6>' +
                    '<p class="captionText card_address">' + results.places[i].formattedAddress + '</p>' +
                    '<div class="buttons">' +
                    // '<div class="btn-group">' +
                    '<a class="more-info external-link" target="_blank" href="' + results.places[i]._wpURL + '">More Info</a>' +
                    // '<a class="btn btn-sm btn-outline-secondary" target="_blank" href="' + results.places[i]._wpURL + '"><i class="fab fa-apple"></i>&nbsp; More Info</a>' +
                    //   '<a class="mdc-fab" onclick="storePlace(' + i + ')" href="/a-places/a-new?name=' + results.places[i].name + 
                    '<a class="mdc-fab" onclick="storePlace(' + i + ')" href="/a-places/g-search?name=' + results.places[i].name + 

                    '&address=' + results.places[i].formattedAddress + 
                    '&latitude=' + results.places[i].coordinate.latitude +
                    '&longitude=' + results.places[i].coordinate.longitude +
                    //   '&_wpURL=' + results.places[i]._wpURL + 
                    //   '&muid=' + results.places[i].muid + 
                    '"><span class="material-icons mdc-fab__icon" style="color: white">add</span></a>' +
                    // '</div>' + 
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>';
            }

                    // document.getElementById("results").innerHTML +=
                    // '<div class="col-lg-6 col-md-6 col-sm-12">' +
                    // '<div class="content card mb-4 box-shadow text-white bg-dark">' +
                    // '<div class="content card-body" style="border-top: 5px solid #17a2b8;">' +
                    // '<h5 class="card-title mb-3">Not found the place you are looking for?</h5>' +
                    // '<a href="g-search" class="btn btn-primary" onclick="">Try Google</a>'
                    // '</div>' +
                    // '</div>' +
                    // '</div>';

            //Controls - Mapkit search results    
            // var annotations = results.places.map(function(place) {
            //     var annotation = new mapkit.MarkerAnnotation(place.coordinate);
            //     annotation.title = place.name;
            //     annotation.subtitle = place.formattedAddress;
            //     annotation.color = "#51d0f1";
            
            // // Clustering setup
            //     annotation.clusteringIdentifier = "DetailedCollectionCluster";
            //     // annotation.collisionMode = mapkit.Annotation.CollisionMode.Circle;
            //     //annotation.displayPriority = mapkit.Annotation.DisplayPriority.High;
            //     return annotation;
            // });


            // number map items
            var MarkerAnnotation = mapkit.MarkerAnnotation;
            var mapItems = [];
            var i = 0;
            results.places.forEach(function(place){ 
                var item = new mapkit.Coordinate(place.coordinate.latitude, place.coordinate.longitude);
                    var annotation = new MarkerAnnotation(item, { color: "#757575", title: place.name, subtitle: place.formattedAddress, glyphText: (i+1).toString() });
                // annotation.clusteringIdentifier = "DetailedCollectionCluster";
                // annotation.collisionMode = mapkit.Annotation.CollisionMode.Rectangle;
                // annotation.displayPriority = mapkit.Annotation.DisplayPriority.High;
                mapItems.push(annotation);
                i++;
            }); 
            var locationOrigin = document.getElementById("geocoder").value;
        if (!locationOrigin == "") {
                var latOrigin = Number(document.getElementById("latitide").value);
                var lngOrigin = Number(document.getElementById("longitude").value);
                console.log("lat: " + latOrigin);
                var originCoord = new mapkit.Coordinate(latOrigin, lngOrigin);
                var orginAnnotation = new mapkit.MarkerAnnotation(originCoord, { color: "green", glyphText: "YOU" });
                mapItems.push(orginAnnotation);
                
                
                 var stats = [
                    { radius: 1000 },
                    { radius: 2000 },
                ];
                var style = new mapkit.Style({
                    lineWidth: 2,         // 2 CSS pixels
                    strokeColor: "#999",
                    fillColor: "#666"
                });
                var circles = stats.map(function(stat) {
                    // var coordinate = new mapkit.Coordinate(latOrigin, lngOrigin),
                        // radius = <%= //distKm %> * 1000, // radius is expressed in meters
                        var radius = stat.radius, // radius is expressed in meters
                        circle = new mapkit.CircleOverlay(originCoord, radius);
                    circle.style = style;
                    return circle;
                });
                map.addOverlays(circles);   

                
                
                }
            map.showItems(mapItems);





            
            // map.showItems(orginAnnotation);
        });
    };
    

    // function to clear previous results from map and list
    function clearPreviousAnnotations() {
        let annotations = map.annotations;
        map.removeAnnotations(annotations);
        let overlays = map.overlays;
        map.removeOverlays(overlays);
        // mapkit.Overlay[] removeOverlays(mapkit.Overlay[] overlays);
        document.getElementById('results').innerHTML = "";
    }
    
    function clearSession() {
                sessionStorage.removeItem('placeData');
                sessionStorage.removeItem('fbPlaceID');
                sessionStorage.removeItem('googlePlaceID');
                sessionStorage.removeItem('imageURL');
                sessionStorage.removeItem('categories');
            };  

    function storePlace(num) {
        clearSession();
        var placeData = JSON.stringify(placeObj[num]);
        //fetch object

        // document.getElementById("test");
        sessionStorage.setItem('placeData', placeData);

        console.log(sessionStorage.getItem(placeData));
    }
</script>




<script>
    // // listen for geocoder input submission via enter key
    // document.getElementById("searchTerm").addEventListener("keypress", function(e) {
    //     if (e.keyCode === 13) { //checks whether the pressed key is "Enter"
    //         searchFn(e);
    //     }
    // });
    // // listen for search input submission via search button click
    // document.getElementById("searchBtn").addEventListener("click", searchFn);


    // //search Mapkit JS Places API with search query
    // function searchFn() {

    //     // // call function to clear any exisiting search results
    //     clearPreviousAnnotations();

    //     let location = document.getElementById("geocoder").value;
    //     let geocoder = new mapkit.Geocoder({
    //         getsUserLocation: true
    //     });

    //     geocoder.lookup(location, function(error, data) {
    //         if (error) {
    //             console.log(error);
    //             return;
    //         }
    //         // console.log(data);
    //             // document.getElementById("results").innerHTML +=
    //             //     '<h5 class="card-title mb-3">' + data.results[0].coordinate + '</h5>';
    //             document.getElementById("latitide").value = data.results[0].coordinate.latitude;
    //             document.getElementById("longitude").value = data.results[0].coordinate.longitude;
    //             // map.addAnnotation(new mapkit.MarkerAnnotation(data.results[0].coordinate));
    //         });
    //         map.showItems(annotations);
    //     };
        
        
            // function to clear previous results from map and list
    //     function clearPreviousAnnotations() {
    //     let annotations = map.annotations;
    //     map.removeAnnotations(annotations);
    //     document.getElementById('results').innerHTML = "";
    // }

</script>


<script> // get user location with browser geolocation
var x = document.getElementById("coords");

function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition, showError);
    } else { 
        x.innerHTML = "Geolocation is not supported by this browser.";
    }
}

function showPosition(position) {
    // x.innerHTML = "Latitude: " + position.coords.latitude + 
    // "<br>Longitude: " + position.coords.longitude;
    document.getElementById("latitide").value = position.coords.latitude;
    document.getElementById("longitude").value = position.coords.longitude;
    document.getElementById("geocoder").value = "";
    document.getElementById("geocoder").placeholder = "Near Me";
}
function showError(error) {
    switch(error.code) {
        case error.PERMISSION_DENIED:
            x.innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            x.innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            x.innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            x.innerHTML = "An unknown error occurred."
            break;
    }
}

</script>





<script>
    window.onload = function() {
        
        // check to see if interactive features of apple maps are working
        console.log("isRotationAvailable: " + map.isRotationAvailable);
        console.log("isRotationEnabled: " + map.isRotationEnabled);
        console.log("isZoomEnabled: " + map.isZoomEnabled);
        console.log("isScrollEnabled: " + map.isScrollEnabled);
        if (map.isRotationAvailable == false) {
            // alert("Rotation not available!");
            // window.location.replace("http://www.google.com");
        }
        
    // get user location and center map
    var userLat, userLng;
    var region;
    if(navigator.geolocation){
        navigator.geolocation.getCurrentPosition(loadPosition, loadError);
    }
    function loadPosition(position) {
        userLat = position.coords.latitude;
        userLng = position.coords.longitude;
        
        region = new mapkit.CoordinateRegion(
            new mapkit.Coordinate(userLat, userLng), 
            new mapkit.CoordinateSpan(.005, .005)
        );
        console.log(userLat + " ," + userLng + typeof(userLat));
        map.setRegionAnimated(region, true);
        map.showsUserLocation = true;
    };
    function loadError(error) {
    switch(error.code) {
        case error.PERMISSION_DENIED:
            document.getElementById("demo").innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            document.getElementById("demo").innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            document.getElementById("demo").innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            document.getElementById("demo").innerHTML = "An unknown error occurred."
            break;
    } };
    }
</script>

<!--sessionStorage.setItem('place', JSON.stringify(placeObj[0]));-->

<% include ../partials/footer %>
